// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.1
//   protoc               v3.20.3
// source: auth/v1/user_service.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../../google/protobuf/empty.pb";

export const protobufPackage = "auth.v1";

export interface Users {
  users: User[];
}

export interface User {
  id: string;
  username: string;
  password: string;
  age: number;
  subscribed: boolean;
}

export const AUTH_V1_PACKAGE_NAME = "auth.v1";

export interface UsersServiceClient {
  findAllUsers(request: Empty, metadata?: Metadata): Observable<Users>;
}

export interface UsersServiceController {
  findAllUsers(request: Empty, metadata?: Metadata): Promise<Users> | Observable<Users> | Users;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findAllUsers"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";

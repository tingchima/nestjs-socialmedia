// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.1
//   protoc               v3.20.3
// source: socialmedia_api/v1/gateway_hook_service.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../../google/protobuf/empty.pb";
import { Timestamp } from "../../google/protobuf/timestamp.pb";

export const protobufPackage = "socialmedia_api.v1";

export interface OnClientConnectedRequest {
  clientInfo: ClientInfo | undefined;
}

export interface OnClientDisconnectedRequest {
  clientInfo: ClientInfo | undefined;
}

export interface ClientInfo {
  node: string;
  clientId: string;
  userEmail: string;
  accessToken: string;
}

export interface OnChatPublishRequest {
  channelId: number;
  chatCreatedAt: Timestamp | undefined;
  publishAt: Timestamp | undefined;
}

export interface OnChatAckedRequest {
  channelId: number;
  chatCreatedAt: Timestamp | undefined;
  ackedAt: Timestamp | undefined;
}

export interface OnChatDeliveredRequest {
  channelId: number;
  chatCreatedAt: Timestamp | undefined;
  deliveredAt: Timestamp | undefined;
}

export interface Chat {
  createdAt: Timestamp | undefined;
  channelId: number;
  text: string;
}

export const SOCIALMEDIA_API_V1_PACKAGE_NAME = "socialmedia_api.v1";

export interface GatewayHookServiceClient {
  onClientConnected(request: OnClientConnectedRequest, metadata?: Metadata): Observable<Empty>;

  onClientDisconnected(request: OnClientDisconnectedRequest, metadata?: Metadata): Observable<Empty>;

  onChatPublish(request: OnChatPublishRequest, metadata?: Metadata): Observable<Empty>;

  onChatDelivered(request: OnChatDeliveredRequest, metadata?: Metadata): Observable<Empty>;

  onChatAcked(request: OnChatAckedRequest, metadata?: Metadata): Observable<Empty>;
}

export interface GatewayHookServiceController {
  onClientConnected(request: OnClientConnectedRequest, metadata?: Metadata): void;

  onClientDisconnected(request: OnClientDisconnectedRequest, metadata?: Metadata): void;

  onChatPublish(request: OnChatPublishRequest, metadata?: Metadata): void;

  onChatDelivered(request: OnChatDeliveredRequest, metadata?: Metadata): void;

  onChatAcked(request: OnChatAckedRequest, metadata?: Metadata): void;
}

export function GatewayHookServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "onClientConnected",
      "onClientDisconnected",
      "onChatPublish",
      "onChatDelivered",
      "onChatAcked",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("GatewayHookService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("GatewayHookService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const GATEWAY_HOOK_SERVICE_NAME = "GatewayHookService";
